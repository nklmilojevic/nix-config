version: "3"

vars:
  USERNAME:
    sh: whoami
  HOME_DIR: /Users/{{.USERNAME}}
  HOSTNAME:
    sh: scutil --get ComputerName 2>/dev/null || uname -n
  OS:
    sh: uname -s
  SECRETS_FILE: "{{.HOME}}/.config/fish/secrets.fish"
  OP: op
  SSH_CONFIG_FILE: "{{.HOME}}/.ssh/config"
  ATUIN_KEY_FILE: "{{.HOME}}/.local/share/atuin/key"
  AGE_KEY_FILE: "{{.HOME}}/.config/sops/age/keys.txt"

tasks:
  default:
    cmds:
      - task --list
    desc: Show available tasks

  build:
    cmds:
      - |
        if [ "{{.OS}}" = "Darwin" ]; then
          echo "Building Nix-Darwin configuration..."
          nix build .#darwinConfigurations.{{.HOSTNAME}}.system
        else
          echo "Building Nix Home Manager configuration for Linux..."
          nix build .#homeConfigurations.linux.activationPackage
        fi
    desc: Build the configuration

  switch:
    cmds:
      - |
        if [ "{{.OS}}" = "Darwin" ]; then
          echo "Switching to the new Nix-Darwin configuration..."
          ./result/sw/bin/darwin-rebuild switch --flake .#{{.HOSTNAME}}
          task post-switch
          echo "Secrets rewritten."
        else
          echo "Activating the new Home Manager configuration for Linux..."
          ./result/activate
        fi
    desc: Apply the new configuration and generate secrets

  post-switch:
    cmds:
      - echo "Running post-switch tasks..."
      - task check-op-signin
      - task all-secrets
    desc: Run post-switch tasks (generate secrets)

  check-op-signin:
    cmds:
      - |
        if ! {{.OP}} account get --format=json >/dev/null 2>&1; then
          echo "1Password is not signed in. Please sign in:"
          eval $({{.OP}} signin)
        else
          echo "1Password is already signed in."
        fi

  update:
    cmds:
      - echo "Updating flake.lock..."
      - nix flake update
    desc: Update the flake.lock file

  clean:
    cmds:
      - echo "Cleaning build artifacts..."
      - rm -rf result
    desc: Clean build artifacts

  edit:
    cmds:
      - echo "Opening configuration files for editing..."
      - $EDITOR flake.nix
    desc: Edit the configuration

  status:
    cmds:
      - echo "Showing current Nix-Darwin and Home Manager status..."
      - darwin-rebuild dry-run
    desc: Show the current status

  darwin-refresh:
    cmds:
      - echo "Refreshing Nix-Darwin configuration..."
      - sudo darwin-rebuild switch --flake . --show-trace
    desc: Refresh Nix-Darwin configuration

  universal-build:
    deps: [build, switch]
    desc: Build and apply the new configuration based on the OS

  setup-nix:
    cmds:
      - echo "Installing Nix package manager..."
      - curl --proto '=https' --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install --no-confirm
    desc: Install Nix package manager

  all-secrets:
    deps:
      [
        generate-secrets,
        generate-ssh-config,
        generate-atuin-key,
        generate-age-key,
      ]

  generate-secrets:
    cmds:
      - echo "Generating secrets..."
      - mkdir -p $(dirname {{.SECRETS_FILE}})
      - |
        cat > {{.SECRETS_FILE}} << EOF
        # Generated secrets - Do not edit manually

        set -gx GITHUB_TOKEN "$({{.OP}} read 'op://legemi4nfmddm5osivm3cmejem/gf7hmnugrwm5rtdbmipz66daum/token')"
        set -gx OPENAI_API_KEY "$({{.OP}} read 'op://legemi4nfmddm5osivm3cmejem/k5spka7d2l4moyxfe5mlo2v4na/apikey')"
        set -gx COPILOT_API_KEY "$({{.OP}} read 'op://legemi4nfmddm5osivm3cmejem/gz3mhtpcg3xq5cbhf5wgnnnhe4/credential')"
        set -gx OPENROUTER_KEY "$({{.OP}} read 'op://legemi4nfmddm5osivm3cmejem/4i54jnese3xijduebelr3ct6yq/credential')"
        set -gx AWS_ACCESS_KEY_ID "$({{.OP}} read 'op://awxerreoeg3k4w6tsh2kc6rr7i/2kjsroafpbafkfxd5sfzsreqpm/AWS_ACCESS_KEY_ID')"
        set -gx AWS_SECRET_ACCESS_KEY "$({{.OP}} read 'op://awxerreoeg3k4w6tsh2kc6rr7i/2kjsroafpbafkfxd5sfzsreqpm/AWS_SECRET_ACCESS_KEY')"
        EOF
      - echo "Secrets generated in {{.SECRETS_FILE}}"

  generate-ssh-config:
    cmds:
      - echo "Generating SSH config..."
      - mkdir -p $(dirname {{.SSH_CONFIG_FILE}})
      - "{{.OP}} read 'op://legemi4nfmddm5osivm3cmejem/eallxdl2umzqln63sb46m3w32a/notesPlain' > {{.SSH_CONFIG_FILE}}"
      - echo "SSH config generated in {{.SSH_CONFIG_FILE}}"

  generate-atuin-key:
    cmds:
      - echo "Generating Atuin key..."
      - mkdir -p $(dirname {{.ATUIN_KEY_FILE}})
      - "{{.OP}} read 'op://legemi4nfmddm5osivm3cmejem/7sov5yg4zpikuz25m2itz6ndhi/password' > {{.ATUIN_KEY_FILE}}"
      - echo "Atuin key generated in {{.ATUIN_KEY_FILE}}"

  generate-age-key:
    cmds:
      - echo "Generating Age key..."
      - mkdir -p $(dirname {{.AGE_KEY_FILE}})
      - "{{.OP}} read 'op://legemi4nfmddm5osivm3cmejem/rsguk7qmlg2pufvtc7xyd2h6gi/password' > {{.AGE_KEY_FILE}}"
      - echo "Age key generated in {{.AGE_KEY_FILE}}"

  install-fonts:
    cmds:
      - echo "Installing private fonts..."
      - |
        TEMP_DIR=$(mktemp -d)
        FONTS_DIR="{{.HOME_DIR}}/Library/Fonts"

        # Create fonts directory if it doesn't exist
        mkdir -p "$FONTS_DIR"

        # Fetch zip from 1Password and save to temp directory
        {{.OP}} read "op://legemi4nfmddm5osivm3cmejem/lcqj53otepp3bmxpswcr2wajyu/fonts.zip" --out-file="$TEMP_DIR/fonts.zip"

        # Unzip fonts
        unzip -q "$TEMP_DIR/fonts.zip" -d "$TEMP_DIR/fonts"

        # Copy all font files to user fonts directory
        cp "$TEMP_DIR"/fonts/*.{ttf,otf,TTF,OTF} "$FONTS_DIR/" 2>/dev/null || true

        # Cleanup
        rm -rf "$TEMP_DIR"

        echo "Fonts installed in $FONTS_DIR"
    desc: Install private fonts from 1Password
